<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel VLOOKUP Master Training</title>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f0f0f0;
            color: #000;
            overflow: hidden;
            /* Global spell-check and grammar removal */
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
        }

        /* Global removal of all text decorations and spell-check */
        * {
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
            -webkit-text-decoration-line: none !important;
            -webkit-text-decoration-style: none !important;
            -webkit-text-decoration-color: transparent !important;
            text-decoration: none !important;
        }

        *[contenteditable] {
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
            -webkit-text-decoration-line: none !important;
            text-decoration: none !important;
        }

        /* Excel Window Header */
        .excel-window-header {
            background: linear-gradient(to bottom, #4a4a4a, #2d2d30);
            color: #ffffff;
            padding: 8px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 12px;
            border-bottom: 2px solid #1a1a1a;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .window-title {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .excel-icon {
            width: 18px;
            height: 18px;
            background: linear-gradient(135deg, #107c41, #0e6b37);
            border-radius: 3px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.3);
        }

        .window-controls {
            display: flex;
            gap: 1px;
        }

        .control-btn {
            width: 46px;
            height: 29px;
            background: transparent;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s;
        }

        .control-btn:hover {
            background: rgba(255,255,255,0.1);
        }

        /* Excel Ribbon */
        .excel-ribbon {
            background: linear-gradient(to bottom, #4a4a4a, #2d2d30);
            color: #ffffff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .ribbon-tabs {
            background: linear-gradient(to bottom, #4a4a4a, #3a3a3a);
            display: flex;
            border-bottom: 1px solid #3e3e42;
        }

        .ribbon-tab {
            padding: 10px 18px;
            cursor: pointer;
            font-size: 11px;
            border-bottom: 2px solid transparent;
            color: #cccccc;
            transition: all 0.2s;
        }

        .ribbon-tab:hover {
            background: rgba(255,255,255,0.05);
            color: #ffffff;
        }

        .ribbon-tab.active {
            background: linear-gradient(to bottom, #484848, #404040);
            color: #ffffff;
            border-bottom-color: #0078d4;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .ribbon-content {
            background: linear-gradient(to bottom, #525252, #424242);
            padding: 8px 16px;
            display: flex;
            gap: 16px;
            align-items: center;
            min-height: 100px;
            border-bottom: 2px solid #2d2d30;
        }

        .ribbon-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px 12px;
            border-right: 1px solid rgba(255,255,255,0.1);
            min-height: 84px;
            justify-content: center;
            color: #e0e0e0;
            font-size: 11px;
        }

        /* Formula Bar */
        .formula-bar-container {
            background: linear-gradient(to bottom, #f8f8f8, #f0f0f0);
            border-bottom: 2px solid #d0d0d0;
            display: flex;
            align-items: center;
            padding: 4px 8px;
            gap: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .name-box {
            width: 80px;
            height: 24px;
            border: 1px solid #c0c0c0;
            background: white;
            font-size: 11px;
            text-align: center;
            line-height: 22px;
            font-family: Calibri, sans-serif;
            border-radius: 2px;
            font-weight: 600;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
        }

        .fx-icon {
            width: 24px;
            height: 24px;
            background: linear-gradient(to bottom, #f8f8f8, #e8e8e8);
            border: 1px solid #c0c0c0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            cursor: pointer;
            border-radius: 2px;
            color: #333;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .fx-icon:hover {
            background: linear-gradient(to bottom, #e8e8e8, #d8d8d8);
        }

        .formula-bar {
            flex: 1;
            height: 24px;
            border: 1px solid #c0c0c0;
            background: white;
            font-size: 11px;
            padding: 4px 8px;
            font-family: Calibri, sans-serif;
            outline: none;
            border-radius: 2px;
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
        }

        .formula-bar:focus {
            border-color: #0078d4;
            box-shadow: 0 0 0 2px rgba(0,120,212,0.2);
        }

        /* Excel Grid */
        .excel-grid-container {
            background: white;
            height: calc(100vh - 200px);
            overflow: auto;
            position: relative;
            border-top: 1px solid #d0d0d0;
        }

        .excel-grid {
            border-collapse: separate;
            border-spacing: 0;
            background: white;
        }

        .col-header, .row-header {
            background: linear-gradient(to bottom, #f8f8f8, #e8e8e8);
            border: 1px solid #c0c0c0;
            text-align: center;
            font-size: 11px;
            font-family: Calibri, sans-serif;
            font-weight: 500;
            color: #333;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: inset 0 1px 0 rgba(255,255,255,0.7);
        }

        .col-header:hover, .row-header:hover {
            background: linear-gradient(to bottom, #e8e8e8, #d8d8d8);
        }

        .col-header {
            width: 84px;
            height: 24px;
            line-height: 22px;
        }

        .row-header {
            width: 44px;
            height: 24px;
            line-height: 22px;
        }

        /* Excel Cells - Clean and Professional */
        .excel-cell {
            border: 1px solid #d0d0d0;
            width: 84px;
            height: 24px;
            padding: 2px 6px;
            font-size: 11px;
            font-family: Calibri, sans-serif;
            background: white;
            cursor: cell;
            outline: none;
            line-height: 20px;
            vertical-align: middle;
            position: relative;
            transition: all 0.15s ease;
            user-select: text;
            overflow: hidden;
            /* Remove all spell-check and grammar underlining */
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
            -webkit-text-decoration-line: none !important;
            -webkit-text-decoration-style: none !important;
            -webkit-text-decoration-color: transparent !important;
            text-decoration: none !important;
        }

        .excel-cell[contenteditable="true"] {
            /* Extra spell-check removal for editing mode */
            -webkit-spellcheck: false;
            -moz-spellcheck: false;
            spellcheck: false;
            -webkit-text-decoration-line: none !important;
            text-decoration: none !important;
            text-decoration-line: none !important;
            text-decoration-style: none !important;
            text-decoration-color: transparent !important;
        }

        .excel-cell[contenteditable="true"]:focus {
            /* Remove all decorations when focused */
            -webkit-text-decoration-line: none !important;
            text-decoration: none !important;
            outline: none;
        }

        /* Force remove any browser-applied text decorations */
        .excel-cell * {
            text-decoration: none !important;
            -webkit-text-decoration-line: none !important;
        }

        .excel-cell:hover {
            background: #f8f9fa;
            border-color: #a0a0a0;
        }

        .excel-cell.selected {
            border: 2px solid #0078d4 !important;
            background: white !important;
            box-shadow: 0 0 0 1px #0078d4 inset, 0 0 12px rgba(0,120,212,0.25) !important;
            z-index: 10;
        }

        .excel-cell.editing {
            border: 2px solid #0078d4;
            background: white;
            z-index: 15;
            cursor: text;
        }

        .excel-cell.highlighted {
            background: #fff3cd !important;
            border-color: #ffc107 !important;
            animation: pulse 2s infinite;
            box-shadow: 0 0 15px rgba(255,193,7,0.5) !important;
        }

        .excel-cell.range-highlighted {
            background: #e3f2fd !important;
            border-color: #2196f3 !important;
            box-shadow: 0 0 10px rgba(33,150,243,0.4) !important;
            animation: rangeGlow 1.5s infinite;
        }

        .excel-cell.lookup-highlighted {
            background: #f3e5f5 !important;
            border-color: #9c27b0 !important;
            box-shadow: 0 0 10px rgba(156,39,176,0.4) !important;
            animation: lookupGlow 1.5s infinite;
        }

        @keyframes pulse {
            0%, 100% { 
                background: #fff3cd;
                transform: scale(1);
            }
            50% { 
                background: #ffeb3b;
                transform: scale(1.01);
            }
        }

        @keyframes rangeGlow {
            0%, 100% { 
                background: #e3f2fd;
                border-color: #2196f3;
            }
            50% { 
                background: #bbdefb;
                border-color: #1976d2;
            }
        }

        @keyframes lookupGlow {
            0%, 100% { 
                background: #f3e5f5;
                border-color: #9c27b0;
            }
            50% { 
                background: #e1bee7;
                border-color: #7b1fa2;
            }
        }

        /* Formula result styling */
        .has-formula {
            font-weight: 600;
            background: linear-gradient(135deg, #e8f5e9, #c8e6c9) !important;
            color: #1b5e20;
            text-align: center;
            animation: resultGlow 0.8s ease-out;
        }

        @keyframes resultGlow {
            0% { 
                background: #ffeb3b;
                transform: scale(1.05);
                box-shadow: 0 0 20px rgba(255,235,59,0.6);
            }
            100% { 
                background: linear-gradient(135deg, #e8f5e9, #c8e6c9);
                transform: scale(1);
            }
        }

        /* Training Panel - Enhanced Design */
        .training-panel {
            position: fixed;
            right: 0;
            top: 0;
            width: 480px;
            height: 100vh;
            background: linear-gradient(145deg, #667eea 0%, #764ba2 100%);
            color: white;
            z-index: 3000;
            display: flex;
            flex-direction: column;
            box-shadow: -8px 0 32px rgba(0,0,0,0.4);
            transform: translateX(100%);
            transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .training-panel.active {
            transform: translateX(0);
        }

        .training-header {
            background: rgba(0,0,0,0.25);
            padding: 24px;
            text-align: center;
            border-bottom: 1px solid rgba(255,255,255,0.2);
            backdrop-filter: blur(5px);
        }

        .training-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .training-subtitle {
            font-size: 14px;
            opacity: 0.9;
            font-weight: 300;
        }

        .progress-container {
            padding: 24px;
            border-bottom: 1px solid rgba(255,255,255,0.15);
        }

        .progress-bar {
            background: rgba(255,255,255,0.2);
            height: 8px;
            border-radius: 4px;
            margin-bottom: 12px;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
        }

        .progress-fill {
            background: linear-gradient(90deg, #4CAF50, #66BB6A);
            height: 100%;
            width: 0%;
            border-radius: 4px;
            transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 2px 8px rgba(76,175,80,0.4);
        }

        .progress-text {
            font-size: 13px;
            opacity: 0.95;
            font-weight: 500;
            text-align: center;
        }

        .steps-container {
            flex: 1;
            overflow-y: auto;
            padding: 0 24px 24px;
        }

        /* Enhanced Step Design */
        .step {
            background: rgba(255,255,255,0.08);
            margin-bottom: 20px;
            border-radius: 16px;
            padding: 24px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
            overflow: hidden;
        }

        .step::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: transparent;
            transition: all 0.3s ease;
        }

        .step.active {
            background: rgba(255,255,255,0.18);
            box-shadow: 0 12px 32px rgba(0,0,0,0.3);
            border-color: rgba(255,255,255,0.25);
            transform: translateY(-4px);
        }

        .step.active::before {
            background: linear-gradient(90deg, #ff9800, #ffb74d);
        }

        .step.completed {
            background: rgba(76, 175, 80, 0.25);
            border-color: rgba(76, 175, 80, 0.4);
        }

        .step.completed::before {
            background: #4CAF50;
        }

        .step.waiting {
            opacity: 0.6;
        }

        .step-header {
            display: flex;
            align-items: center;
            gap: 18px;
            margin-bottom: 16px;
        }

        .step-number {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        .step-number.completed {
            background: #4CAF50;
            box-shadow: 0 4px 16px rgba(76,175,80,0.4);
            animation: completePulse 0.6s ease-out;
        }

        .step-number.active {
            background: #ff9800;
            box-shadow: 0 4px 16px rgba(255,152,0,0.4);
            animation: activePulse 2s infinite;
        }

        @keyframes completePulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        @keyframes activePulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .step-title {
            font-size: 18px;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0,0,0,0.2);
        }

        .step-description {
            font-size: 14px;
            line-height: 1.5;
            opacity: 0.92;
            margin-bottom: 16px;
        }

        .step-instruction {
            background: rgba(255,255,255,0.15);
            padding: 16px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            border-left: 4px solid #ff9800;
            margin-bottom: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .step-action {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(76,175,80,0.3);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .step-action:hover:not(:disabled) {
            background: linear-gradient(135deg, #45a049, #388e3c);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76,175,80,0.4);
        }

        .step-action:disabled {
            background: rgba(255,255,255,0.2);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .status-message {
            margin-top: 16px;
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 13px;
            font-weight: 500;
            display: none;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .status-message.success {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.5);
            color: #e8f5e8;
            display: block;
        }

        .status-message.waiting {
            background: rgba(255, 193, 7, 0.2);
            border: 1px solid rgba(255, 193, 7, 0.5);
            color: #fff8e1;
            display: block;
        }

        /* Toggle Button */
        .toggle-panel {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(145deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 20px 14px;
            border-radius: 12px 0 0 12px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            writing-mode: vertical-lr;
            z-index: 2500;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: -4px 0 20px rgba(0,0,0,0.3);
            letter-spacing: 1px;
        }

        .toggle-panel:hover {
            transform: translateY(-50%) translateX(-6px);
            box-shadow: -6px 0 24px rgba(0,0,0,0.4);
            background: linear-gradient(145deg, #5a6fd8, #6a42a0);
        }

        .toggle-panel.panel-open {
            right: 500px;
        }

        /* Excel container adjustment */
        .excel-container {
            transition: margin-right 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .excel-container.panel-open {
            margin-right: 480px;
        }

        /* Instruction pointer - Enhanced Green Arrow */
        .instruction-pointer {
            position: absolute;
            width: 0;
            height: 0;
            border-left: 18px solid transparent;
            border-right: 18px solid transparent;
            border-bottom: 25px solid #4CAF50;
            z-index: 1000;
            animation: gentleBounce 2s infinite;
            pointer-events: none;
            filter: drop-shadow(0 4px 8px rgba(76, 175, 80, 0.4));
        }

        .instruction-pointer::after {
            content: '';
            position: absolute;
            top: 25px;
            left: -8px;
            width: 0;
            height: 0;
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 10px solid #4CAF50;
        }

        @keyframes gentleBounce {
            0%, 85%, 100% { 
                transform: translateY(0);
                filter: drop-shadow(0 4px 8px rgba(76, 175, 80, 0.4));
            }
            42% { 
                transform: translateY(-3px);
                filter: drop-shadow(0 5px 10px rgba(76, 175, 80, 0.45));
            }
        }

        /* Custom scrollbar */
        .steps-container::-webkit-scrollbar {
            width: 8px;
        }

        .steps-container::-webkit-scrollbar-track {
            background: rgba(255,255,255,0.1);
            border-radius: 4px;
        }

        .steps-container::-webkit-scrollbar-thumb {
            background: rgba(255,255,255,0.3);
            border-radius: 4px;
        }

        .steps-container::-webkit-scrollbar-thumb:hover {
            background: rgba(255,255,255,0.4);
        }
    </style>
</head>
<body>
    <!-- Excel Container -->
    <div class="excel-container panel-open" id="excelContainer">
        <!-- Window Header -->
        <div class="excel-window-header">
            <div class="window-title">
                <div class="excel-icon"></div>
                <span>Book1 - Excel</span>
                <span style="margin-left: 24px; color: #aaa; font-size: 11px;">AutoSave Off</span>
            </div>
            <div class="window-controls">
                <button class="control-btn" title="Minimize">−</button>
                <button class="control-btn" title="Maximize">□</button>
                <button class="control-btn" title="Close">×</button>
            </div>
        </div>

        <!-- Ribbon -->
        <div class="excel-ribbon">
            <div class="ribbon-tabs">
                <div class="ribbon-tab">File</div>
                <div class="ribbon-tab active">Home</div>
                <div class="ribbon-tab">Insert</div>
                <div class="ribbon-tab">Page Layout</div>
                <div class="ribbon-tab">Formulas</div>
                <div class="ribbon-tab">Data</div>
                <div class="ribbon-tab">Review</div>
                <div class="ribbon-tab">View</div>
            </div>
            <div class="ribbon-content">
                <div class="ribbon-group">Clipboard</div>
                <div class="ribbon-group">Font</div>
                <div class="ribbon-group">Alignment</div>
                <div class="ribbon-group">Number</div>
                <div class="ribbon-group">Styles</div>
                <div class="ribbon-group">Cells</div>
                <div class="ribbon-group">Editing</div>
            </div>
        </div>

        <!-- Formula Bar -->
        <div class="formula-bar-container">
            <div class="name-box" id="nameBox">A1</div>
            <div class="fx-icon" title="Insert Function">fx</div>
            <input class="formula-bar" id="formulaBar" placeholder="Click on a cell and start typing..." readonly>
        </div>

        <!-- Excel Grid -->
        <div class="excel-grid-container">
            <table class="excel-grid" id="excelGrid">
                <!-- Grid will be generated by JavaScript -->
            </table>
        </div>
    </div>

    <!-- Training Panel -->
    <div class="training-panel active" id="trainingPanel">
        <div class="training-header">
            <div class="training-title">🎯 Excel VLOOKUP Training</div>
            <div class="training-subtitle">Follow the steps and interact with Excel directly</div>
        </div>

        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">Ready to begin your VLOOKUP journey</div>
        </div>

        <div class="steps-container" id="stepsContainer">
            <!-- Steps will be generated by JavaScript -->
        </div>
    </div>

    <!-- Toggle Button -->
    <button class="toggle-panel panel-open" id="toggleBtn" onclick="training.toggleTrainingPanel()">
        📚 VLOOKUP Training
    </button>

    <!-- Instruction Pointer -->
    <div class="instruction-pointer" id="instructionPointer" style="display: none;"></div>

    <script>
        class VLookupTraining {
            constructor() {
                // Core state
                this.selectedCell = null;
                this.isEditing = false;
                this.panelOpen = true;
                this.currentStep = 0;
                this.completedSteps = new Set();
                this.isProgressingStep = false; // Prevent concurrent step progressions
                
                // Data storage
                this.cellFormulas = {}; // Store formulas separately
                this.cellValues = {};   // Store display values
                this.trainingSteps = [];
                
                // UI elements
                this.instructionPointer = document.getElementById('instructionPointer');
                
                // Sample data for the training
                this.sampleData = {
                    A1: 'Employee ID', B1: 'Employee Name', D1: 'Search ID', E1: 'Result',
                    A2: '101', B2: 'John Smith',
                    A3: '102', B3: 'Sarah Davis', 
                    A4: '103', B4: 'Alice Johnson',
                    A5: '104', B5: 'Michael Brown',
                    A6: '105', B6: 'Emily Wilson',
                    D2: '103'
                };

                // Employee lookup data for VLOOKUP
                this.employeeData = {
                    '101': 'John Smith',
                    '102': 'Sarah Davis',
                    '103': 'Alice Johnson', 
                    '104': 'Michael Brown',
                    '105': 'Emily Wilson'
                };

                this.init();
            }

            async init() {
                console.log('🚀 Initializing VLOOKUP Training...');
                this.createExcelGrid();
                this.setupEventListeners();
                this.initializeTrainingSteps();
                this.selectCell(document.querySelector('[data-address="A1"]'));
                this.startTraining();
            }

            createExcelGrid() {
                const grid = document.getElementById('excelGrid');
                
                // Create header row with column letters
                const headerRow = document.createElement('tr');
                headerRow.appendChild(document.createElement('td')); // Empty corner cell
                
                for (let col = 0; col < 10; col++) {
                    const header = document.createElement('td');
                    header.className = 'col-header';
                    header.textContent = String.fromCharCode(65 + col);
                    headerRow.appendChild(header);
                }
                grid.appendChild(headerRow);

                // Create data rows
                for (let row = 1; row <= 30; row++) {
                    const tr = document.createElement('tr');
                    
                    // Row header with number
                    const rowHeader = document.createElement('td');
                    rowHeader.className = 'row-header';
                    rowHeader.textContent = row;
                    tr.appendChild(rowHeader);
                    
                    // Data cells
                    for (let col = 0; col < 10; col++) {
                        const cell = document.createElement('td');
                        cell.className = 'excel-cell';
                        const address = String.fromCharCode(65 + col) + row;
                        cell.dataset.address = address;
                        
                        // Setup cell events for Excel-like behavior
                        this.setupCellEvents(cell);
                        tr.appendChild(cell);
                    }
                    grid.appendChild(tr);
                }
            }

            setupCellEvents(cell) {
                // Single click to select
                cell.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (!this.isEditing) {
                        this.selectCell(cell);
                    }
                });

                // Double click to start editing
                cell.addEventListener('dblclick', (e) => {
                    e.stopPropagation();
                    this.startEditing(cell);
                });

                // Keyboard handling
                cell.addEventListener('keydown', (e) => {
                    this.handleCellKeydown(e, cell);
                });

                // Input handling during editing
                cell.addEventListener('input', () => {
                    if (this.isEditing) {
                        // Remove any browser-applied text decorations
                        cell.style.textDecoration = 'none';
                        cell.style.webkitTextDecorationLine = 'none';
                        
                        this.updateFormulaBar();
                        this.checkProgress();
                    }
                });

                // Focus handling
                cell.addEventListener('focus', () => {
                    this.selectCell(cell);
                });

                // Blur handling to finish editing
                cell.addEventListener('blur', () => {
                    if (this.isEditing) {
                        setTimeout(() => this.finishEditing(), 100);
                    }
                });
            }

            setupEventListeners() {
                const formulaBar = document.getElementById('formulaBar');
                
                // Make formula bar show formulas only, not editable
                formulaBar.addEventListener('focus', () => {
                    formulaBar.blur(); // Don't allow direct editing
                });

                // Global keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    // F2 to edit selected cell
                    if (e.key === 'F2' && this.selectedCell && !this.isEditing) {
                        e.preventDefault();
                        this.startEditing(this.selectedCell);
                    }
                });

                // Click outside to hide highlights
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('.excel-cell') && !e.target.closest('.training-panel')) {
                        this.hideInstructionPointer();
                    }
                });
            }

            selectCell(cell) {
                if (!cell) return;

                // Remove previous selection
                if (this.selectedCell) {
                    this.selectedCell.classList.remove('selected');
                }

                // Set new selection
                this.selectedCell = cell;
                cell.classList.add('selected');

                // Update name box
                document.getElementById('nameBox').textContent = cell.dataset.address;
                
                // Update formula bar with formula (if exists) or value
                const address = cell.dataset.address;
                const formulaBar = document.getElementById('formulaBar');
                formulaBar.value = this.cellFormulas[address] || cell.textContent || '';

                // Hide instruction pointer when user selects a cell
                this.hideInstructionPointer();

                // Check progress after selection
                this.checkProgress();
            }

            startEditing(cell) {
                if (this.isEditing) return;

                this.isEditing = true;
                cell.classList.add('editing');
                
                const address = cell.dataset.address;
                const originalContent = this.cellFormulas[address] || cell.textContent || '';
                
                // Set cell content to original formula for editing
                cell.textContent = originalContent;
                cell.setAttribute('contenteditable', 'true');
                
                // Disable spell-check and grammar check completely
                cell.setAttribute('spellcheck', 'false');
                cell.setAttribute('autocorrect', 'off');
                cell.setAttribute('autocapitalize', 'off');
                cell.setAttribute('data-gramm', 'false'); // Disable Grammarly
                cell.style.textDecoration = 'none';
                cell.style.webkitTextDecorationLine = 'none';
                
                cell.focus();

                // Update formula bar
                document.getElementById('formulaBar').value = originalContent;

                // Select all content for easy replacement
                setTimeout(() => {
                    const range = document.createRange();
                    range.selectNodeContents(cell);
                    const selection = window.getSelection();
                    selection.removeAllRanges();
                    selection.addRange(range);
                }, 10);
            }

            finishEditing() {
                if (!this.isEditing || !this.selectedCell) return;

                this.isEditing = false;
                this.selectedCell.classList.remove('editing');
                this.selectedCell.setAttribute('contenteditable', 'false');

                const address = this.selectedCell.dataset.address;
                const content = this.selectedCell.textContent.trim();

                if (content.startsWith('=')) {
                    // It's a formula - store it and calculate result
                    this.cellFormulas[address] = content;
                    const result = this.calculateFormula(content);
                    this.cellValues[address] = result;
                    this.selectedCell.textContent = result;
                    this.selectedCell.classList.add('has-formula');
                    
                    console.log(`Formula stored: ${content}, Result: ${result}`);
                } else {
                    // Regular value
                    delete this.cellFormulas[address];
                    this.cellValues[address] = content;
                    this.selectedCell.classList.remove('has-formula');
                }

                // Update formula bar to show the formula
                document.getElementById('formulaBar').value = this.cellFormulas[address] || content;

                // Check progress with a slight delay to ensure DOM is updated
                setTimeout(() => {
                    this.checkProgress();
                }, 100);
            }

            handleCellKeydown(e, cell) {
                if (this.isEditing) {
                    // Handle editing mode keys
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.finishEditing();
                        this.navigateCell('down');
                    } else if (e.key === 'Escape') {
                        e.preventDefault();
                        // Restore original value
                        const address = cell.dataset.address;
                        cell.textContent = this.cellValues[address] || '';
                        this.isEditing = false;
                        cell.classList.remove('editing');
                        cell.setAttribute('contenteditable', 'false');
                    } else if (e.key === 'Tab') {
                        e.preventDefault();
                        this.finishEditing();
                        this.navigateCell('right');
                    }
                } else {
                    // Handle navigation mode keys
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.navigateCell('down');
                    } else if (e.key === 'Tab') {
                        e.preventDefault();
                        this.navigateCell('right');
                    } else if (e.key === 'Delete' || e.key === 'Backspace') {
                        e.preventDefault();
                        this.clearCell(cell);
                    } else if (e.key.length === 1 || e.key === '=') {
                        // Start typing - begin editing
                        this.startEditing(cell);
                        cell.textContent = e.key;
                    } else if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
                        e.preventDefault();
                        const direction = e.key.replace('Arrow', '').toLowerCase();
                        this.navigateCell(direction);
                    }
                }
            }

            navigateCell(direction) {
                if (!this.selectedCell) return;

                const address = this.selectedCell.dataset.address;
                const col = address.charCodeAt(0) - 65;
                const row = parseInt(address.slice(1));

                let newCol = col;
                let newRow = row;

                switch(direction) {
                    case 'up': newRow = Math.max(1, row - 1); break;
                    case 'down': newRow = Math.min(30, row + 1); break;
                    case 'left': newCol = Math.max(0, col - 1); break;
                    case 'right': newCol = Math.min(9, col + 1); break;
                }

                const newAddress = String.fromCharCode(65 + newCol) + newRow;
                const nextCell = document.querySelector(`[data-address="${newAddress}"]`);
                if (nextCell) {
                    this.selectCell(nextCell);
                }
            }

            clearCell(cell) {
                const address = cell.dataset.address;
                cell.textContent = '';
                cell.classList.remove('has-formula');
                delete this.cellFormulas[address];
                delete this.cellValues[address];
                document.getElementById('formulaBar').value = '';
                this.checkProgress();
            }

            updateFormulaBar() {
                if (this.selectedCell && this.isEditing) {
                    document.getElementById('formulaBar').value = this.selectedCell.textContent;
                }
            }

            calculateFormula(formula) {
                try {
                    if (formula.toUpperCase().includes('VLOOKUP')) {
                        return this.calculateVLOOKUP(formula);
                    }
                    // Add other formula types here as needed
                    return formula; // Return as-is if we can't calculate
                } catch (e) {
                    return '#ERROR!';
                }
            }

            calculateVLOOKUP(formula) {
                // Parse VLOOKUP formula: =VLOOKUP(lookup_value, table_array, column_index, range_lookup)
                const match = formula.match(/=VLOOKUP\s*\(\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^,]+)\s*,\s*([^)]+)\s*\)/i);
                if (!match) return '#ERROR!';

                const [, lookupValue, tableArray, columnIndex, rangeLookup] = match;
                
                // Get the lookup value
                let searchValue = lookupValue.trim();
                if (searchValue.match(/^[A-Z]+\d+$/)) {
                    // It's a cell reference - get the value
                    const refCell = document.querySelector(`[data-address="${searchValue}"]`);
                    searchValue = refCell ? (this.cellValues[searchValue] || refCell.textContent) : '';
                }

                // Use our employee data for lookup
                return this.employeeData[searchValue] || '#N/A';
            }

            // Training System
            initializeTrainingSteps() {
                this.trainingSteps = [
                    {
                        title: "Add Sample Data",
                        description: "Let's start by adding employee data to work with. This creates our lookup table that VLOOKUP will search through.",
                        instruction: "👇 Click the button below to populate the spreadsheet",
                        type: "action",
                        check: () => document.querySelector('[data-address="A1"]')?.textContent === 'Employee ID'
                    },
                    {
                        title: "Select Result Cell",
                        description: "Choose where our VLOOKUP result will appear. We'll look up the employee name for the ID in D2.",
                        instruction: "👆 Click on cell E2 in the Excel grid above",
                        target: "E2",
                        type: "selection",
                        check: () => this.selectedCell?.dataset.address === 'E2'
                    },
                    {
                        title: "Start VLOOKUP Formula",
                        description: "VLOOKUP is Excel's most powerful lookup function. It searches the first column of a table for a value.",
                        instruction: "💡 Double-click cell E2, then type: =VLOOKUP(",
                        target: "E2",
                        type: "input",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const content = e2?.textContent?.toUpperCase() || '';
                            // Only check for the start of VLOOKUP, not the complete formula
                            // Also ensure we haven't progressed past this step
                            return content.startsWith('=VLOOKUP(') && content.length >= 9 && content.length <= 12 && !content.includes('D2');
                        }
                    },
                    {
                        title: "Enter Lookup Value",
                        description: "The first argument is what we're looking for. We want to find the name for the employee ID in cell D2.",
                        instruction: "⌨️ Continue typing: D2,",
                        target: "E2",
                        highlightCells: ["D2"],
                        highlightType: "lookup",
                        type: "input",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const content = e2?.textContent?.toUpperCase() || '';
                            // Check for D2 but not the complete formula - ensure step 3 is completed first
                            return content.includes('=VLOOKUP(') && content.includes('D2,') && !content.includes('A2:B6');
                        }
                    },
                    {
                        title: "Define Table Array",
                        description: "The table array tells VLOOKUP where to search. Our employee data is in columns A:B, rows 2-6.",
                        instruction: "⌨️ Continue typing: A2:B6,",
                        target: "E2",
                        highlightCells: ["A2", "A3", "A4", "A5", "A6", "B2", "B3", "B4", "B5", "B6"],
                        highlightType: "range",
                        type: "input",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const content = e2?.textContent?.toUpperCase() || '';
                            // Check for A2:B6 but not the complete formula - ensure previous steps are completed
                            return content.includes('=VLOOKUP(') && content.includes('D2,') && content.includes('A2:B6,') && !content.includes(',2,');
                        }
                    },
                    {
                        title: "Set Column Index",
                        description: "Column index specifies which column to return. Column A=1, Column B=2. We want names from column B.",
                        instruction: "⌨️ Continue typing: 2,",
                        target: "E2",
                        highlightCells: ["B2", "B3", "B4", "B5", "B6"],
                        highlightType: "range",
                        type: "input",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const content = e2?.textContent || '';
                            // Check for column index but not FALSE yet
                            return (content.includes(',2,') || content.includes(', 2,')) && !content.includes('FALSE');
                        }
                    },
                    {
                        title: "Set Exact Match",
                        description: "The last argument controls match type. FALSE means exact match - safer for most lookups.",
                        instruction: "⌨️ Finish typing: FALSE)",
                        target: "E2",
                        type: "input",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const content = e2?.textContent?.toUpperCase() || '';
                            // Check for complete formula but not executed yet
                            return content.includes('FALSE)') && content.endsWith(')') && !this.cellFormulas['E2'];
                        }
                    },
                    {
                        title: "Execute the Formula",
                        description: "Perfect! Your VLOOKUP is complete. Press Enter to execute it and see the magic happen!",
                        instruction: "⏎ Press Enter to run your VLOOKUP formula",
                        target: "E2",
                        highlightCells: ["D2", "E2"],
                        highlightType: "lookup",
                        type: "execution",
                        check: () => {
                            const e2 = document.querySelector('[data-address="E2"]');
                            const d2 = document.querySelector('[data-address="D2"]');
                            if (!e2 || !d2) return false;
                            
                            const searchValue = this.cellValues['D2'] || d2.textContent;
                            const result = this.cellValues['E2'] || e2.textContent;
                            const hasFormula = !!this.cellFormulas['E2'];
                            
                            // Check if we have a formula and the result matches
                            const isComplete = hasFormula && this.employeeData[searchValue] === result;
                            console.log('Step 8 check:', { searchValue, result, hasFormula, expected: this.employeeData[searchValue], isComplete });
                            return isComplete;
                        }
                    }
                ];

                this.renderSteps();
            }

            startTraining() {
                this.currentStep = 0;
                this.updateActiveStep();
                
                // Initial scroll to top of training panel
                const stepsContainer = document.getElementById('stepsContainer');
                if (stepsContainer) {
                    stepsContainer.scrollTop = 0;
                }
                
                console.log('📚 Training started!');
            }

            renderSteps() {
                const container = document.getElementById('stepsContainer');
                container.innerHTML = '';

                this.trainingSteps.forEach((step, index) => {
                    const stepDiv = document.createElement('div');
                    stepDiv.className = 'step';
                    
                    // Set step state classes
                    if (index === this.currentStep) {
                        stepDiv.classList.add('active');
                    } else if (this.completedSteps.has(index)) {
                        stepDiv.classList.add('completed');
                    } else if (index > this.currentStep) {
                        stepDiv.classList.add('waiting');
                    }

                    let content = `
                        <div class="step-header">
                            <div class="step-number ${this.getStepNumberClass(index)}">${this.getStepNumberContent(index)}</div>
                            <div class="step-title">${step.title}</div>
                        </div>
                        <div class="step-description">${step.description}</div>
                    `;

                    // Add instruction for current step
                    if (index === this.currentStep) {
                        content += `<div class="step-instruction">${step.instruction}</div>`;
                    }

                    // Add action button for step 1
                    if (step.type === 'action' && index === this.currentStep) {
                        content += `<button class="step-action" onclick="training.addSampleData()">Add Sample Data</button>`;
                    }

                    content += `<div class="status-message" id="status${index}"></div>`;
                    stepDiv.innerHTML = content;

                    container.appendChild(stepDiv);
                });
            }

            getStepNumberClass(index) {
                if (this.completedSteps.has(index)) return 'completed';
                if (index === this.currentStep) return 'active';
                return '';
            }

            getStepNumberContent(index) {
                return this.completedSteps.has(index) ? '✓' : (index + 1);
            }

            updateActiveStep() {
                this.renderSteps();
                
                // Auto-scroll to active step in sidebar
                this.scrollToActiveStep();
                
                // Show instruction pointer and highlight cells for current step
                const currentStepData = this.trainingSteps[this.currentStep];
                if (currentStepData) {
                    // Show pointer for target cell
                    if (currentStepData.target) {
                        this.showInstructionPointer(currentStepData.target);
                    } else {
                        this.hideInstructionPointer();
                    }
                    
                    // Show visual highlights for what we're referencing
                    if (currentStepData.highlightCells) {
                        this.highlightCells(currentStepData.highlightCells, currentStepData.highlightType);
                    } else if (!currentStepData.target) {
                        // Only clear highlights if we're not showing a target pointer
                        this.clearAllHighlights();
                    }
                }
            }

            scrollToActiveStep() {
                const activeStep = document.querySelector('.step.active');
                const stepsContainer = document.getElementById('stepsContainer');
                
                if (activeStep && stepsContainer) {
                    // Calculate the position to scroll to
                    const stepRect = activeStep.getBoundingClientRect();
                    const containerRect = stepsContainer.getBoundingClientRect();
                    const stepOffsetTop = activeStep.offsetTop;
                    const containerHeight = stepsContainer.clientHeight;
                    const stepHeight = activeStep.offsetHeight;
                    
                    // Calculate scroll position to center the active step
                    const scrollPosition = stepOffsetTop - (containerHeight / 2) + (stepHeight / 2);
                    
                    // Smooth scroll to the active step
                    stepsContainer.scrollTo({
                        top: Math.max(0, scrollPosition),
                        behavior: 'smooth'
                    });
                }
            }

            showInstructionPointer(cellAddress) {
                const cell = document.querySelector(`[data-address="${cellAddress}"]`);
                if (!cell || !this.instructionPointer) return;

                const rect = cell.getBoundingClientRect();
                const containerRect = document.getElementById('excelContainer').getBoundingClientRect();
                
                // Position arrow to point directly at the center of the cell
                this.instructionPointer.style.left = (rect.left - containerRect.left + rect.width/2 - 18) + 'px';
                this.instructionPointer.style.top = (rect.top - containerRect.top - 35) + 'px';
                this.instructionPointer.style.display = 'block';
                
                // Highlight the target cell with green
                this.clearAllHighlights();
                cell.classList.add('highlighted');
                
                // Override the yellow highlight with green for the pointed cell
                cell.style.background = '#c8e6c9 !important';
                cell.style.borderColor = '#4CAF50 !important';
                cell.style.boxShadow = '0 0 15px rgba(76, 175, 80, 0.6) !important';
            }

            hideInstructionPointer() {
                if (this.instructionPointer) {
                    this.instructionPointer.style.display = 'none';
                }
                // Clear all highlights including any inline styles
                this.clearAllHighlights();
            }

            highlightCells(cellAddresses, highlightType = 'range') {
                // Clear previous highlights
                this.clearAllHighlights();
                
                // Apply new highlights
                cellAddresses.forEach(address => {
                    const cell = document.querySelector(`[data-address="${address}"]`);
                    if (cell) {
                        if (highlightType === 'lookup') {
                            cell.classList.add('lookup-highlighted');
                        } else {
                            cell.classList.add('range-highlighted');
                        }
                    }
                });
            }

            clearAllHighlights() {
                document.querySelectorAll('.excel-cell').forEach(cell => {
                    cell.classList.remove('highlighted', 'range-highlighted', 'lookup-highlighted');
                    // Clear any inline styles applied by the pointer
                    cell.style.background = '';
                    cell.style.borderColor = '';
                    cell.style.boxShadow = '';
                });
            }

            addSampleData() {
                console.log('📊 Adding sample data...');
                
                Object.keys(this.sampleData).forEach((address, index) => {
                    const cell = document.querySelector(`[data-address="${address}"]`);
                    if (cell) {
                        // Add with slight delay for animation effect
                        setTimeout(() => {
                            cell.textContent = this.sampleData[address];
                            this.cellValues[address] = this.sampleData[address];
                            
                            // Add temporary glow effect
                            cell.style.animation = 'resultGlow 0.6s ease-out';
                            setTimeout(() => {
                                cell.style.animation = '';
                            }, 600);
                        }, index * 50);
                    }
                });
                
                this.showStatusMessage(0, 'success', '✅ Sample data added! Now select cell E2.');
                setTimeout(() => this.checkProgress(), 800);
            }

            checkProgress() {
                const currentStepData = this.trainingSteps[this.currentStep];
                if (!currentStepData) return;

                // Prevent multiple simultaneous step progressions
                if (this.isProgressingStep) {
                    console.log('Step progression already in progress, skipping...');
                    return;
                }

                // Only check the current step, not all steps
                if (currentStepData.check()) {
                    // Set flag to prevent concurrent progressions
                    this.isProgressingStep = true;
                    
                    // Mark current step as completed
                    this.completedSteps.add(this.currentStep);
                    this.showStatusMessage(this.currentStep, 'success', '✅ Perfect! Step completed.');
                    
                    console.log(`✅ Step ${this.currentStep + 1} completed!`);
                    
                    // Clear highlights when step completes
                    this.clearAllHighlights();
                    
                    // Move to next step after a brief pause
                    setTimeout(() => {
                        this.currentStep++;
                        this.updateProgress();
                        
                        if (this.currentStep < this.trainingSteps.length) {
                            this.updateActiveStep();
                            this.showStatusMessage(this.currentStep, 'waiting', '👆 Follow the instruction above');
                        } else {
                            this.completeTraining();
                        }
                        
                        // Reset the flag after progression is complete
                        this.isProgressingStep = false;
                    }, 1200);
                }
            }

            completeTraining() {
                this.hideInstructionPointer();
                
                // Make sure step 8 shows as completed with green checkmark
                this.completedSteps.add(7); // Step 8 is index 7
                this.renderSteps(); // Re-render to show the checkmark
                
                this.showStatusMessage(7, 'success', '🎉 Congratulations! You are now a VLOOKUP master!');
                console.log('🎉 Training completed successfully!');
                
                // Update progress text
                document.getElementById('progressText').textContent = '🏆 VLOOKUP Master! Training Complete!';
                
                // Update progress bar to 100%
                document.getElementById('progressFill').style.width = '100%';
            }

            showStatusMessage(stepIndex, type, message) {
                const statusEl = document.getElementById(`status${stepIndex}`);
                if (statusEl) {
                    statusEl.className = `status-message ${type}`;
                    statusEl.textContent = message;
                    
                    // Auto-hide success messages after delay
                    if (type === 'success' && stepIndex < this.currentStep) {
                        setTimeout(() => {
                            statusEl.style.display = 'none';
                        }, 3000);
                    }
                }
            }

            updateProgress() {
                const progress = (this.completedSteps.size / this.trainingSteps.length) * 100;
                document.getElementById('progressFill').style.width = `${progress}%`;
                
                if (this.completedSteps.size >= this.trainingSteps.length) {
                    document.getElementById('progressText').textContent = '🏆 VLOOKUP Master! Training Complete!';
                } else {
                    const stepText = `Step ${this.currentStep + 1} of ${this.trainingSteps.length}`;
                    const progressText = `${Math.round(progress)}% Complete`;
                    document.getElementById('progressText').textContent = `${stepText} • ${progressText}`;
                }
            }

            toggleTrainingPanel() {
                this.panelOpen = !this.panelOpen;
                const panel = document.getElementById('trainingPanel');
                const container = document.getElementById('excelContainer');
                const toggleBtn = document.getElementById('toggleBtn');

                if (this.panelOpen) {
                    panel.classList.add('active');
                    container.classList.add('panel-open');
                    toggleBtn.classList.add('panel-open');
                } else {
                    panel.classList.remove('active');
                    container.classList.remove('panel-open');
                    toggleBtn.classList.remove('panel-open');
                    this.hideInstructionPointer();
                }
            }
        }

        // Initialize the training system
        let training;
        document.addEventListener('DOMContentLoaded', () => {
            training = new VLookupTraining();
        });
    </script>
</body>
</html>
